import Mathlib.MeasureTheory.Constructions.BorelSpace.Basic

open Topology Filter
open MeasureTheory

/-
The purpose of this project is to formalize some results about weak convergence of probability measures.
Let's start with a little bit of background. When working with metric spaces, it is common to consider
convergence within the metric space. It is also possible to consider the metric space as a measurable
space using the Borel œÉ-algebra, which is generated by the open sets. We can then discuss convergence
of measurable functions on the measurable space. In this project, we take this one step further, and
define convergence on the probability measures on the measurable space. We define a notion of convergence,
called weak convergence, as follows:
A sequence of measures (Œº_n) is said to converge weakly to a measure Œº if Œº_n(S) converges to Œº(S) for
all continuity sets S.
Note that a continuity set is a set whose boundary has no mass under Œº, and when we say Œº_n(S) converges
to Œº(S) we mean using the standard topology on ‚Ñù.
-/

-- We start with a Borel space, X, which is a metric space with the Borel œÉ-algebra
variable {X : Type*} [MetricSpace X] [MeasurableSpace X] [BorelSpace X] {S T : Set X} {Œº ŒΩ : Measure X}

-- We formally define what we mean by continuity set: a set whose boundary has no mass under Œº
def IsContinuitySet (Œº : Measure X) (S : Set X) [IsProbabilityMeasure Œº] := Œº (frontier S) = 0

/-
We now use the properties of probability measures to prove some simple results about continuity sets
which will be useful later. Note that we use the first result to prove the next two, since the set lies
between its interior and closure.
-/

-- For a continuity set, the measure of its interior and closure coincide.
theorem meas_int_eq_meas_clos_of_cont_set [IsProbabilityMeasure Œº] (h : IsContinuitySet Œº S) :
    Œº (interior S) = Œº (closure S) := by
  rw [‚Üê add_zero (Œº (interior S)), ‚Üê h, ‚Üê measure_union, closure_eq_interior_union_frontier]
  exact disjoint_interior_frontier
  exact isClosed_frontier.measurableSet

-- For a continuity set, the measure of the set and its interior coincide.
theorem meas_eq_meas_int_of_cont_set [IsProbabilityMeasure Œº] (h : IsContinuitySet Œº S) :
    Œº S = Œº (interior S) := by
  apply eq_of_le_of_le
  ¬∑ rw [meas_int_eq_meas_clos_of_cont_set h]
    exact measure_mono subset_closure
  exact measure_mono interior_subset

-- For a continuity set, the measure of the set and its closure coincide.
theorem meas_eq_meas_clos_of_cont_set [IsProbabilityMeasure Œº] (h : IsContinuitySet Œº S) :
    Œº S = Œº (closure S) := by
  apply eq_of_le_of_le
  ¬∑ exact measure_mono subset_closure
  rw [‚Üê meas_int_eq_meas_clos_of_cont_set h]
  exact measure_mono interior_subset

/-
A sequence of measures (Œº_n) converges weakly to a measure Œº if Œº_n(S) converges to Œº(S) for
all continuity sets S.
-/
def ConvergesWeakly (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :=
    ‚àÄ S, IsContinuitySet Œº S ‚Üí Tendsto (fun x ‚Ü¶ measureSeq x S) atTop (ùìù (Œº S))


/-
We give two definitions, which we will show to be equivalent, and that each is a sufficient
condition for weak convergence. They are as follows.
-/

-- A sequence of measures (Œº_n) converges ro Œº using liminfs if liminf(Œº_n(S)) ‚â• Œº(S) for all open S.
def ConvergesUsingLiminf (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :=
    ‚àÄ S, IsOpen S ‚Üí Œº S ‚â§ liminf (fun x ‚Ü¶ measureSeq x S) atTop

-- A sequence of measures (Œº_n) converges to Œº using limsups if limsup(Œº_n(S)) ‚â§ Œº(S) for all closed S.
def ConvergesUsingLimsup (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :=
  ‚àÄ S, IsClosed S ‚Üí limsup (fun x ‚Ü¶ measureSeq x S) atTop ‚â§ Œº S

/-
We now prove that these two definitions are equivalent. The proofs of the two directions are similar.
-/

-- We prove that if (Œº_n) converges to Œº using liminfs, then (Œº_n) converges to Œº using limsups.
theorem converges_weakly_limsup_of_liminf (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [IsProbabilityMeasure Œº] [‚àÄx, IsProbabilityMeasure (measureSeq x)] :
    ConvergesUsingLiminf measureSeq Œº ‚Üí ConvergesUsingLimsup measureSeq Œº := by

  -- We start with a closed set S.
  intro hLiminf S hS

  -- We give a short lemma, which follows directly from the additivity of measures
  -- and the fact that Œº is a probability measure, Œº(S·∂ú) = 1 - Œº(S)
  have hSSc : Œº S·∂ú = 1 - Œº S := by
    exact prob_compl_eq_one_sub hS.measurableSet

  -- We have a similar lemma, but this time for the measures in the sequence.
  have hseqSSc : ‚àÄ x, measureSeq x S·∂ú = 1 - measureSeq x S := by
    intro x
    apply prob_compl_eq_one_sub hS.measurableSet

  -- We apply convergence using liminfs to S·∂ú, which is open because S is closed.
  have hSc : Œº S·∂ú ‚â§ liminf (fun x => measureSeq x S·∂ú ) atTop := by
    apply hLiminf
    exact hS.isOpen_compl
  simp_rw [hseqSSc] at hSc

  -- We now use properties of liminf and limsup, as well as the previous lemmas to rewrite the
  -- previous inequality into an inequality using S instead of S·∂ú , 1 - Œº(S) ‚â§ 1 - limsup(mu_n(S))
  have hinfsup : liminf (fun x ‚Ü¶ 1 - measureSeq x S) atTop = 1 - limsup (fun x ‚Ü¶ measureSeq x S) atTop := by
    apply ENNReal.liminf_const_sub atTop
    exact ENNReal.one_ne_top
  rw [hinfsup, hSSc] at hSc

  /-
  We now are now almost done with the proof. We have that 1 - Œº(S) ‚â§ 1 - limsup(mu_n(S)) and we
  need to prove that limsup(mu_n(S)) ‚â§ Œº(S). This seems straightforward, but we have a few more
  details to work out because we are working with the extended real numbers.
  -/

  -- We give two lemmas, which follow from the fact that probability measures range from 0 and 1.
  -- The sequence of measures eventually gives mass to S between 0 and 1.
  have hleseq : ‚àÄ·∂† x in atTop, 0 ‚â§ measureSeq x S:= by
    filter_upwards
    intro x
    exact zero_le (measureSeq x S)
  have hseqle : ‚àÄ·∂† x in atTop, measureSeq x S ‚â§ 1 := by
    filter_upwards
    intro x
    exact prob_le_one

  -- We now have everything we need to complete the proof.
  rw [‚Üê ENNReal.sub_le_sub_iff_left]
  ¬∑ exact hSc
  ¬∑ apply limsup_le_of_le
    apply isCoboundedUnder_le_of_eventually_le atTop
    ¬∑ exact hleseq
    exact hseqle
  exact ENNReal.one_ne_top

-- We prove that if (Œº_n) converges to Œº using limisups, then (Œº_n) converges to Œº using liminfs.
theorem converges_weakly_liminf_of_limsup (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :
    ConvergesUsingLimsup measureSeq Œº ‚Üí ConvergesUsingLiminf measureSeq Œº := by

  -- We start with an open set S.
  intro hLimsup S hS

  -- We give a short lemma, which follows directly from the additivity of measures
  -- and the fact that Œº is a probability measure, Œº(S·∂ú) = 1 - Œº(S)
  have hSSc : Œº S·∂ú = 1 - Œº S := by
    exact prob_compl_eq_one_sub hS.measurableSet

  -- We have a similar lemma, but this time for the measures in the sequence.
  have hseqSSc : ‚àÄ x, measureSeq x S·∂ú = 1 - measureSeq x S := by
    intro x
    apply prob_compl_eq_one_sub hS.measurableSet

  -- We apply convergence using limsups to S·∂ú, which is closed because S is open.
  have hSc : limsup (fun x => measureSeq x S·∂ú ) atTop ‚â§ Œº S·∂ú  := by
    apply hLimsup
    exact hS.isClosed_compl
  simp_rw [hseqSSc] at hSc

  -- We now use properties of liminf and limsup, as well as the previous lemmas to rewrite the
  -- previous inequality into an inequality using S instead of S·∂ú, 1 - liminf(mu_n(S)) ‚â§  1 - Œº(S)
  have hsupinf : limsup (fun x ‚Ü¶ 1 - measureSeq x S) atTop = 1 - liminf (fun x ‚Ü¶ measureSeq x S) atTop := by
    apply ENNReal.limsup_const_sub atTop
    exact ENNReal.one_ne_top
  rw [hsupinf, hSSc] at hSc

  -- We now have everything we need to complete the proof. Note that we don't need the same lemmas
  -- as in the previous direction because we only need to show that Œº(S) is bounded.
  rw [‚Üê ENNReal.sub_le_sub_iff_left]
  ¬∑ exact hSc
  ¬∑ exact prob_le_one
  exact ENNReal.one_ne_top

/-
We now combine the previous two results into an equivalence. That is, (Œº_n) converges to Œº using
liminfs if and only if (Œº_n) converges to Œº using limsups.
-/
theorem converges_weakly_limsup_iff_liminf (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :
    ConvergesUsingLiminf measureSeq Œº ‚Üî ConvergesUsingLimsup measureSeq Œº := by
  constructor
  exact converges_weakly_limsup_of_liminf measureSeq Œº
  exact converges_weakly_liminf_of_limsup measureSeq Œº

/-
Now that we have proved that convergence using liminfs and limsups are equivalent, we are ready to
prove that each of them is a sufficient condition for weak convergence. Note that although we only
need one of convergence using liminfs or limsups, we use both in the proof, which is why our previous
result was necessary.
-/

-- We prove that if (Œº_n) converges to Œº using liminfs, then (Œº_n) converges weakly to Œº.
theorem converges_weakly_of_liminf (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :
    ConvergesUsingLiminf measureSeq Œº ‚Üí ConvergesWeakly measureSeq Œº := by

  -- We start with a continuity set S. Recall that this means S has no mass under Œº.
  intro hLiminf S hS

  -- We also have convergence using limsups from the previous results.
  have hLimsup : ConvergesUsingLimsup measureSeq Œº := by
    exact converges_weakly_limsup_of_liminf measureSeq Œº hLiminf

  -- We have two lemmas, which follow from the fact that probability measures range from 0 and 1.
  -- The sequence of measures eventually gives mass to S between 0 and 1.
  have hseqle : ‚àÄ·∂† x in atTop, measureSeq x S ‚â§ 1:= by
    filter_upwards
    intro x
    exact prob_le_one
  have hleseq : ‚àÄ·∂† x in atTop, 0 ‚â§ measureSeq x S:= by
    filter_upwards
    intro x
    exact zero_le (measureSeq x S)

  /-
  We now prove two important facts. They are as follows:
  Œº(int(S)) ‚â§ liminf(Œº_n(S))
  limsup(Œº_n(S)) ‚â§ Œº(cl(S))
  where int(S) is the interior of S and cl(S) is the closure of S.
  -/

  -- We give a lemma which says that eventually Œº_n(int(S)) ‚â§ Œº_n(S). We use the fact that
  -- measures are monotone and that the interior of a set is a subset of the set itself.
  have hseqInt : ‚àÄ·∂† x in atTop, measureSeq x (interior S) ‚â§ measureSeq x S := by
    filter_upwards
    intro x
    exact measure_mono interior_subset

  -- We use properties of liminf and the previous lemma to get that liminf(Œº_n(int(S))) ‚â§ liminf(Œº_n(S)).
  -- Once again we have to show boundedness because we are in the extended real numbers.
  have hseqLiminfInt : liminf (fun x ‚Ü¶ measureSeq x (interior S)) atTop ‚â§ liminf (fun x ‚Ü¶ measureSeq x S) atTop := by
    apply liminf_le_liminf
    ¬∑ exact hseqInt
    ¬∑ apply isBoundedUnder_of
      use 0
      intro x
      exact zero_le (measureSeq x (interior S))
    apply isCoboundedUnder_ge_of_eventually_le
    exact hseqle

  -- We get out desired fact, Œº(int(S)) ‚â§ liminf(Œº_n(int(S))) ‚â§ liminf(Œº_n(S)) by applying transitivity to the
  -- previous result and convergence using liminfs, which we can do because the interior is open.
  have hLiminfInt : Œº (interior S) ‚â§ liminf (fun x ‚Ü¶ measureSeq x S) atTop := by
    apply le_trans _ hseqLiminfInt
    apply hLiminf
    exact isOpen_interior

  -- We give a lemma which says that eventually Œº_n(S) ‚â§ Œº_n(cl(S)). We use the fact that
  -- measures are monotone and that  a set is a subset of its closure.
  have hseqClos : ‚àÄ·∂† x in atTop, measureSeq x S ‚â§ measureSeq x (closure S) := by
    filter_upwards
    intro x
    exact measure_mono subset_closure

  -- We use properties of limsup and the previous lemma to get that limsup(Œº_n(S)) ‚â§ limsup(Œº_n(cl(S))).
  -- Once again we have to show boundedness because we are in the extended real numbers.
  have hseqLimsupClos : limsup (fun x ‚Ü¶ measureSeq x S) atTop ‚â§ limsup (fun x ‚Ü¶ measureSeq x (closure S)) atTop := by
    apply limsup_le_limsup
    ¬∑ exact hseqClos
    ¬∑ apply isCoboundedUnder_le_of_eventually_le atTop
      exact hleseq
    apply isBoundedUnder_of
    use 1
    intro x
    exact prob_le_one

  -- We get out desired fact, limsup(Œº_n(S)) ‚â§ limsup(Œº_n(cl(S))) ‚â§ Œº(cl(S)) by applying transitivity to the
  -- previous result and convergence using closure, which we can do because the closure is closed.
  have hLimsupClos : limsup (fun x ‚Ü¶ measureSeq x S) atTop ‚â§ Œº (closure S) := by
    apply le_trans hseqLimsupClos
    apply hLimsup
    exact isClosed_closure

  /-
  We are now have everything we need to complete the proof.
  We will need to apply our lemmas about continuity sets when we first defined them.
  These lemmas give us that Œº(int(S)) = Œº(S) = Œº(cl(S)) because S is a set of continuity.
  Then we have limsup(Œº_n(S)) ‚â§ Œº(cl(S)) = Œº(S) = Œº(int(S)) ‚â§ liminf(Œº_n(S))
  But we also have liminf(Œº_n(S)) ‚â§ limsup(Œº_n(S)) from properties of liminf and limsup.
  Then liminf(Œº_n(S)) = limsup(Œº_n(S)) = Œº(S), which gives us convergence to Œº(S).
  After showing boundedness again, we are done.
  -/
  apply tendsto_of_le_liminf_of_limsup_le
  ¬∑ rw [meas_eq_meas_int_of_cont_set hS]
    exact hLiminfInt
  ¬∑ rw [meas_eq_meas_clos_of_cont_set hS]
    exact hLimsupClos
  ¬∑ apply isBoundedUnder_of
    use 1
    intro x
    exact prob_le_one
  apply isBoundedUnder_of
  use 0
  intro x
  exact zero_le (measureSeq x S)

/-
Finally, we prove that if (Œº_n) converges to Œº using limsups, then (Œº_n) converges weakly to Œº.
This is just a simple combination of our previous two results. Recall that they were:
If (Œº_n) converges to Œº using liminfs, then (Œº_n) converges weakly to Œº.
(Œº_n) converges to Œº using liminfs if and only if (Œº_n) converges to Œº using limsups.
-/
theorem converges_weakly_of_limsup (measureSeq : ‚Ñï ‚Üí Measure X) (Œº : Measure X)
    [‚àÄx, IsProbabilityMeasure (measureSeq x)] [IsProbabilityMeasure Œº] :
    ConvergesUsingLimsup measureSeq Œº ‚Üí ConvergesWeakly measureSeq Œº := by
  intro hLimsup
  have hLiminf : ConvergesUsingLiminf measureSeq Œº := by
    exact converges_weakly_liminf_of_limsup measureSeq Œº hLimsup
  exact converges_weakly_of_liminf measureSeq Œº hLiminf
